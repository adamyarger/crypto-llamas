import React, { useState, useEffect } from 'react'
import Head from 'next/head'
import { useWeb3 } from 'context/AppContext'
import {
  Container,
  chakra,
  Button,
  Input,
  FormControl,
  FormLabel
} from '@chakra-ui/react'
import { useLlamaBreedingContract } from 'hooks/useContract'

export default function Home() {
  const { provider } = useWeb3()
  const [name, setName] = useState('')
  const [llamas, setLlamas] = useState<any[]>([])
  const llamaBreeding = useLlamaBreedingContract()

  const handleLlamaForm = async (e: React.SyntheticEvent) => {
    e.preventDefault()
    if (name) {
      await llamaBreeding?.createRandomLlama(name)
    }
  }

  const getLlamas = async () => {
    const count = await llamaBreeding?.llamaCount()
    if (count.gt(0)) {
      for (let i = 0; i < count; i++) {
        llamaBreeding?.llamas(i).then((res: any) => {
          const obj = {
            name: res.name,
            dna: res.dna
          }
          setLlamas((prev) => [...prev, obj])
        })
      }
    }
  }

  useEffect(() => {
    if (provider) {
      console.log(provider.getSigner())
      getLlamas()
    }
  }, [provider])

  // count is a hack until we figure out why it gets fired on load
  let count = 0
  const onNewLlama = (id: string, name: string, dna: object) => {
    console.log('llama created ', id, llamas)
    const obj = {
      name: name,
      dna: dna
    }
    if (count) {
      setLlamas((prev) => [...prev, obj])
    }
    count++
  }

  useEffect(() => {
    if (llamaBreeding) {
      // this is being triggered on reload for the most recently created
      // see if it happens with a different listener
      llamaBreeding?.on('NewLlama', onNewLlama)
      return () => {
        llamaBreeding?.off('NewLlama', onNewLlama)
      }
    }
  }, [llamaBreeding])

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container maxW="container.lg" mt="32">
        <chakra.h1 fontSize="4xl">Welcome to llama land!</chakra.h1>

        <chakra.form mt="8" onSubmit={handleLlamaForm}>
          <FormControl id="llama-name">
            <FormLabel>Name</FormLabel>
            <Input value={name} onChange={(e) => setName(e.target.value)} />
          </FormControl>

          <Button colorScheme="blue" mt="4" type="submit">
            Create Llama
          </Button>
        </chakra.form>

        <chakra.div marginTop="8">
          <ul>
            {llamas.map((item, index) => (
              <li key={index}>{item.name}</li>
            ))}
          </ul>
        </chakra.div>
      </Container>
    </div>
  )
}
